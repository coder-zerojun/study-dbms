/*
 * 자동차
 * 
 * - 자동차 번호
 * - 자동차 브랜드
 * - 출시 날짜
 * - 색상
 * - 가격
 * 
 * 
 * */
CREATE TABLE TBL_CAR (
	CAR_ID NUMBER PK_CAR,
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER,
	CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID)
);


CREATE TABLE TBL_CAR (
	CAR_ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER
);

DROP TABLE TBL_CAR;

ALTER TABLE TBL_CAR DROP CONSTRAINT PK_CAR;
ALTER TABLE TBL_CAR ADD CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID);


/*
 * 동물 테이블 생성
 * 
 * - 고유 번호
 * - 종류
 * - 나이
 * - 먹이
 *  
 * 
 * */
CREATE TABLE TBL_ANIMAL (
	ANIMAL_NUMBER NUMBER CONSTRAINT PK_NUM PRIMARY KEY,
	ANIMAL_SPECIES VARCHAR2(1000),
	ANIMAL_AGE NUMBER,
	ANIMAL_FOOD VARCHAR2(1000)
);

ALTER TABLE TBL_ANIMAL DROP CONSTRAINT PK_NUM;
ALTER TABLE TBL_ANIMAL ADD CONSTRAINT PK_NUM PRIMARY KEY(ANIMAL_NUMBER);


/*
 * (도메인 무결성)
 * 학생 테이블 생성
 * 
 * - 학생 번호
 * - 학생 아이디
 * - 학생 이름
 * - 전공
 * - 성별
 * - 생년월일
 * - 학생 나이 NOT NULL, DEFAULT는 생년월일로 계산된 나이, 19보다 커야한다(추가)
 * - 학생 학점(A+ ~ F)(추가) 'A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'
 * 
 * 
 * */

CREATE TABLE TBL_STUDENT(
	STUDENT_ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_IDENTIFICATION VARCHAR2(1000) CONSTRAINT UK_STUDENT UNIQUE,
	STUDENT_NAME VARCHAR2(1000) CONSTRAINT REQUIER_NAME NOT NULL,
	STUDENT_MAJOR VARCHAR2(1000) CONSTRAINT REQUIER_MAJOR NOT NULL,
	STUDENT_GENDER CHAR(1) DEFAULT 'N' CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN('M', 'F', 'N')) CONSTRAINT REQUIER_GENDER NOT NULL,
	STUDENT_BIRTH DATE CONSTRAINT BAN_DATE CHECK(STUDENT_BIRTH >= TO_DATE('1985-01-01', 'YYYY-MM-DD')) CONSTRAINT REQUIER_BIRTH NOT NULL
);

/* 학생 아이디는 NULL을 허용하지 않는다. NOT NULL 제약 조건은 추가가 아닌 수정으로 한다*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_IDENTIFICATION CONSTRAINT REQUIER_IDENTIFICATION NOT NULL;
/* 제약조건의 이름을 성정하지 않으면 시스템 이름으로 설정되기 때문에 지우고 다시 이름을 붙여주는 것이 좋다*/
ALTER TABLE TBL_STUDENT DROP CONSTRAINT SYS_C007012;
/* 기존 BAN_CHAR 제약조건을 없앤다*/
ALTER TABLE TBL_STUDENT DROP CONSTRAINT BAN_CHAR;
/* BAN_CHAR 제약조건을 추가한다. 성별에는 M, W, N 이외의 문자가 들어가지 못하게 한다*/
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN ('M', 'W', 'N'));
/* DEFAULT 제약조건은 추가가 아닌 수정으로 진행하며, 학생 성별에 W를 기본 값으로 설정한다*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_GENDER DEFAULT 'W';
/* 학생 나이 컬럼 추가*/
ALTER TABLE TBL_STUDENT ADD(STUDENT_AGE NUMBER);
/* 학생 학점 컬럼 추가*/
ALTER TABLE TBL_STUDENT ADD(STUDENT_GRADE VARCHAR2(10));
/* 학생 나이는 필수 요소로서 NULL을 허용하지 않는다*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE CONSTRAINT REQUIRE_AGE NOT NULL; 
/* 학생 나이는 19세가 넘어야 된다 */
ALTER TABLE TBL_STUDENT ADD CONSTRAINT CHECK_AGE CHECK(STUDENT_AGE > 19);
/* DEFAULT 제약조건에 다른 컬럼의 값을 가져와 연산할 수 없다. INSERT 또는 다른 언어로 처리해야 한다*/
/*ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE DEFAULT TRUNC((SYSDATE - STUDENT_BIRTH) / 365);*/
/* 학생 학점은 IN절에 작성된 문자만 사용 가능하다 */
/* COLUMN IN(A, B, C) -> COLUMN = A OR COLUMN =B OR COLUMN = C */
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_GRADE CHECK(STUDENT_GRADE IN ('A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'));

ALTER TABLE TBL_STUDENT DROP CONSTRAINT GRADE_TYPE;
ALTER TABLE TBL_STUDENT DROP CONSTRAINT AGE_NOT_NULL;

/*전체 조회 */
SELECT * FROM TBL_STUDENT;

/*정보 추가*/
INSERT INTO TBL_STUDENT 
(STUDENT_ID, STUDENT_IDENTIFICATION, STUDENT_NAME, STUDENT_MAJOR, STUDENT_BIRTH, STUDENT_AGE, STUDENT_GRADE)
VALUES(1, 'LYJ', '홍길동', '컴퓨터공학', '1985-12-19', 40, 'A+');

INSERT INTO TBL_STUDENT 
(STUDENT_ID, STUDENT_IDENTIFICATION, STUDENT_NAME, STUDENT_MAJOR, STUDENT_BIRTH, STUDENT_AGE, STUDENT_GRADE)
VALUES(2, 'HLE', '밍중', '컴퓨터공학', '1990-03-26', 34, 'B');


/* 정보 수정*/
UPDATE TBL_STUDENT 
SET STUDENT_GENDER = 'N'
WHERE STUDENT_ID = 1;


/* 정보 삭제*/
DELETE FROM TBL_STUDENT
WHERE STUDENT_ID = 2;

/* 정보 삭제 복구 불가능*/
TRUNCATE TABLE TBL_STUDENT; 


/* 조합 키
 * 
 * 하나의 PK에 2개 이상의 컬럼이 조합된 형태
 * 
 * */

/*
 * 
 * TBL_FLOWER
   ---------------------------------
   FLOWER_NAME : VARCHAR2 PK_FLOWER
   FLOWER_COLOR : VARCHAR2 PK_FLOWER
   ---------------------------------
   FLOWER_PRICE : NUMBER NOT NULL
   *
   */

CREATE TABLE TBL_FLOWER(
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR2(1000),
	FLOWER_PRICE NUMBER CONSTRAINT REQUIRE_PRICE NOT NULL,
	CONSTRAINT PK_FLOWER PRIMARY KEY(FLOWER_NAME, FLOWER_COLOR)
);


/*
   TBL_POT
   ---------------------------------
   POT_ID : NUMBER PK_POT
   ---------------------------------
   POT_COLOR : VARCHAR2 NOT NULL
   POT_SHAPE : VARCHAR2 NOT NULL
   FLOWER_NAME : VARCHAR2 FOREIGN KEY NOT NULL
   FLOWER_COLOR : VARCHAR2 FOREIGN KEY NOT NULL
 * 
 * */

CREATE TABLE TBL_POT(
	POT_ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
	POT_COLOR VARCHAR2(1000) CONSTRAINT REQUIRE_COLOR NOT NULL,
	POT_SHAPE VARCHAR2(1000) CONSTRAINT REQUIRE_SHAPE NOT NULL,
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR2(1000),
	CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_NAME, FLOWER_COLOR)
	REFERENCES TBL_FLOWER(FLOWER_NAME, FLOWER_COLOR)	
);

/* 정보 조회*/
SELECT * FROM TBL_FLOWER;
SELECT * FROM TBL_POT;

/* 정보 추가 */
INSERT INTO TBL_FLOWER
(FLOWER_NAME, FLOWER_COLOR, FLOWER_PRICE)
VALUES('장미', '빨간색', 10000);

INSERT INTO TBL_FLOWER
(FLOWER_NAME, FLOWER_COLOR, FLOWER_PRICE)
VALUES('장미', '노란색', 11000);


INSERT INTO TBL_POT
(POT_ID, POT_COLOR, POT_SHAPE, FLOWER_NAME, FLOWER_COLOR)
VALUES(1, '파란색', '정육면체', '장미', '노란색');


INSERT INTO TBL_POT
(POT_ID, POT_COLOR, POT_SHAPE, FLOWER_NAME, FLOWER_COLOR)
VALUES(2, '검은색', '벽돌집', '장미', '노란색');

INSERT INTO TBL_POT
(POT_ID, POT_COLOR, POT_SHAPE, FLOWER_NAME, FLOWER_COLOR)
VALUES(3, '초록색', '원기둥', '장미', '빨간색');


/* 정보 수정 */
UPDATE TBL_POT 
SET FLOWER_COLOR = '빨간색';
WHERE POT_ID = 2;

DELETE FROM TBL_POT
WHERE FLOWER_NAME = '장미';

DELETE FROM TBL_FLOWER
WHERE FLOWER_NAME = '장미'; 




CREATE TABLE TBL_OWNER(
	OWNER_ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(1000) CONSTRAINT REQUIRE_OWNER_NAME NOT NULL,
	OWNER_PHONE VARCHAR2(1000) CONSTRAINT UK_OWNER UNIQUE NOT NULL,
	OWNER_AGE NUMBER CONSTRAINT REQUIRE_OWNER_AGE NOT NULL,
	OWNER_ADDERESS VARCHAR2(1000)
);
ALTER TABLE TBL_OWNER DROP CONSTRAINT REQUIRE_OWNER_AGE;
ALTER TABLE TBL_OWNER MODIFY OWNER_ADDERESS CONSTRAINT REQUIRE_ADDRESS NOT NULL;


CREATE TABLE TBL_PET(
	PET_ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
	PET_TYPE VARCHAR2(1000) CONSTRAINT UK_PET UNIQUE NOT NULL,
	PET_NAME VARCHAR2(1000) CONSTRAINT REQUIRE_PET_NAME NOT NULL,
	PET_AGE NUMBER CONSTRAINT REQUIRE_PET_AGE NOT NULL,
	PET_DESEASE VARCHAR2(1000) CONSTRAINT REQUIRE_DESEASE NOT NULL,
	OWNER_ID NUMBER,
	CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
	REFERENCES TBL_OWNER(OWNER_ID)
);

ALTER TABLE TBL_OWNER DROP CONSTRAINT UK_OWNER;
ALTER TABLE TBL_PET MODIFY PET_TYPE CONSTRAINT REQUIRE_TYPE NOT NULL;

/* 시퀀스 생성*/
CREATE SEQUENCE SEQ_OWNER;
CREATE SEQUENCE SEQ_PET;


/*=====================================OWNER========================================*/
SELECT * FROM TBL_OWNER;

/* 정보 추가*/
INSERT INTO TBL_OWNER
(OWNER_ID, OWNER_NAME, OWNER_PHONE, OWNER_AGE, OWNER_ADDERESS)
VALUES(SEQ_OWNER.NEXTVAL, '홍길동', '01012341234', 20, '서울시 노원구');

/* 정보 수정 */
/* 두 번째 한동석을 이순신으로 변경*/
UPDATE TBL_OWNER 
SET OWNER_NAME = '이순신'
WHERE OWNER_ID = 3;


/* =====================================PET===============================================*/
/* 반려 동물 추가 : 동일한 보호자로 지정*/
/* 2마리 이상의 반려동물 보호자의 핸드폰 번호를 다른 번호로 변경*/
/* 반려 동물을 키우고 있는 보호자를 병원 보호자 명단에서 삭제*/
SELECT * FROM TBL_PET;

INSERT INTO TBL_PET
(PET_ID, PET_TYPE, PET_NAME, PET_AGE, PET_DESEASE, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '불독', '뽀순이', 3, '사레', 1);

INSERT INTO TBL_PET
(PET_ID, PET_TYPE, PET_NAME, PET_AGE, PET_DESEASE, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '고양이', '톰', 3, '사레', 3);

INSERT INTO TBL_PET
(PET_ID, PET_TYPE, PET_NAME, PET_AGE, PET_DESEASE, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '쥐', '제리', 3, '사레', 3);

UPDATE TBL_OWNER
SET OWNER_PHONE = '01012331233'
WHERE OWNER_ID IN
(
	SELECT OWNER_ID FROM TBL_PET
	GROUP BY OWNER_ID
	HAVING COUNT(OWNER_ID) > 1
);

DELETE FROM TBL_PET
WHERE OWNER_ID IS NOT NULL;

DELETE FROM TBL_OWNER
WHERE OWNER_ID IN(1, 3);









